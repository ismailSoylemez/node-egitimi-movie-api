const mongoose = require('mongoose');const express = require('express');const router = express.Router();//MODELSconst Director = require('../models/Director');//Yönetmen eklemerouter.post('/' , (req,res,next) => {    // gelecek olan post datasıyla doldurulacak içi    const director = new Director(req.body);    const promise = director.save();    promise.then((data) => {        res.json(data);    }).catch((err) => {        res.json(err);    });});// tüm yönetmenler ve onlara ait filmlerin getirilmesirouter.get('/' , (req,res) => {    const promise = Director.aggregate([        {            $lookup: {            //director tablosu nereyle join edilecek                from: 'movies',            //director tablosundan hangi alanla eşleştireceksin                localField: '_id',            //movies koleksiyonunda hangi alanla eşleşecek                foreignField: 'director_id',            //nereye atayacak                as: 'movies'            }        },        {            $unwind:{                path: '$movies',            //filmi olmayan yönetmenleri de listelemek için                preserveNullAndEmptyArrays: true            }        },        {            //movies leri ayrı ayrı göstermesini            //engellemek için gruplama yapmak            //gerekiyor            $group: {                _id: {                    _id: '$id',                    name: '$name',                    surname: '$surname',                    bio: '$bio'                },                movies: {                    $push: '$movies'                }            }        },        {            $project: {                _id: '$_id._id',                name: '$_id.name',                surname: '$_id.surname',                movies: '$movies'            }        }    ]);    promise.then((data) => {        res.json(data);    }).catch((err) => {        res.json(err);    });});//Yönetmen Detayrouter.get('/:director_id' , (req,res) => {// diğer router ile tüm işlemler aynı fakat bu kez    //match ile spesific bir şey getirdik    const promise = Director.aggregate([        {            $match: {                '_id': mongoose.Types.ObjectId(req.params.director_id)            }        } ,        {            $lookup: {                //director tablosu nereyle join edilecek                from: 'movies',                //director tablosundan hangi alanla eşleştireceksin                localField: '_id',                //movies koleksiyonunda hangi alanla eşleşecek                foreignField: 'director_id',                //nereye atayacak                as: 'movies'            }        },        {            $unwind:{                path: '$movies',                //filmi olmayan yönetmenleri de listelemek için                preserveNullAndEmptyArrays: true            }        },        {            //movies leri ayrı ayrı göstermesini            //engellemek için gruplama yapmak            //gerekiyor            $group: {                _id: {                    _id: '$id',                    name: '$name',                    surname: '$surname',                    bio: '$bio'                },                movies: {                    $push: '$movies'                }            }        },        {            $project: {                _id: '$_id._id',                name: '$_id.name',                surname: '$_id.surname',                movies: '$movies'            }        }    ]);    promise.then((data) => {        res.json(data);    }).catch((err) => {        res.json(err);    });});// Yönetmen güncellemerouter.put('/:director_id',(req,res,next) => {    const promise = Director.findByIdAndUpdate(        req.params.director_id,        req.body,        {            new: true        }    );    promise.then((data) => {        if(!data)            next({message:'The movie was not found.', code: 99});        res.json(data);    }).catch((err) => {        res.json(err);    });});// Yönetmen silmerouter.delete('/:director_id' , (req,res,next) => {    const promise = Director.findByIdAndRemove(req.params.director_id);    promise.then((director) => {        if(!director)            next("silinecek yönetmen bulunamadı");        res.json(director);    }).catch((err) => {        res.json(err);    });});module.exports = router;